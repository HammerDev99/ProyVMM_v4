/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proyvmm;

import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author Estudiante
 */
public class frmContenido extends javax.swing.JFrame {
    Vector objVector;
    Matriz objMatriz;

    /**
     * Creates new form frmContenido
     */
    public frmContenido() {
        initComponents();
        txtPaneDescripcion.setVisible(false);
        jComboBox2.setVisible(false);
        jToggleButton1.setText("OFF");
        objVector=new Vector(10);//crear objeto
        objMatriz=new Matriz(5,5);//crear objeto
    }
    
    public void mostrarMatriz(){
        int nf,nc;
        String auxMatriz="";
        nf=objMatriz.getNf();
        nc=objMatriz.getNc();
        int mat[][]=objMatriz.getMat();
        auxMatriz=auxMatriz+"                                                   Datos de la matriz:\n\n";
        for (int i = 0; i < nf; i++) {
            for (int j = 0; j < nc; j++) {
                if (mat[i][j]<10){
                    auxMatriz=auxMatriz+"      ["+i+"]["+j+"]=  "+mat[i][j]+"    ";
                }
                if (mat[i][j]>=10){
                    auxMatriz=auxMatriz+"      ["+i+"]["+j+"]="+mat[i][j]+"    ";
                }
            }
            auxMatriz=auxMatriz+"\n";
        }
        txtPaneMatriz.setText(auxMatriz);
    }
    
    public  void mostrarVector(){//muestra el vector en una variable auxiliar de tipo string
        int tama,I;
        String auxvector;       
        tama=objVector.getN();
        int vec[]= objVector.get_vect();//se crea vector para recibir el vector
        auxvector="             Posicion"+ "             Dato"+"\n";
        for(I=0;I<tama;I++){
            auxvector=auxvector+"                   "+I+"                         "+vec[I]+"\n";
        }
        atxtVector.setText(auxvector);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        atxtVector = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton3 = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnIntercambioC = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtPaneMatriz = new javax.swing.JTextPane();
        btnLlenarMatriz = new javax.swing.JButton();
        btnOrdenAscendente = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        lblTitulo1 = new javax.swing.JLabel();
        btnGenerar = new javax.swing.JButton();
        btnIntercambioF = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPaneDescripcion = new javax.swing.JTextPane();
        jToggleButton1 = new javax.swing.JToggleButton();
        jComboBox2 = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto Vector Matriz y Más");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jLabel1.setText("Barra desplegable:");

        jButton1.setBackground(new java.awt.Color(0, 204, 102));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Calcular Método");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ","Generar vector", "1. Sumar datos del vector", "2. Buscar el dato mayor y posicion del vector","3. Suma de los datos del vector ubicados en las posiciones pares","4. Suma de los datos del vector ubicados en las posiciones impares" ,"5. Promedio de los datos","6. Mostrar cada uno de los datos mayores al promedio","7. Mostrar el promedio de los datos ubicados en las posiciones pares","8. Mostrar el promedio de los datos ubicados en las posiciones impares","9. Cuantos datos del vector son mayores que el promedio","10. Muestre los datos del vector que son múltiplos de tres","11. El producto de los datos del vector","12. La suma de los datos del vector excepto, 1, n/2 y n","13. Mostrar el elemento menor en el vector","14. Mostrar el número de datos del vector que son impares","15. Mostrar el número de datos del vector que son pares","16. Intercambiar los datos del vector","17. Calcule el promedio de los datos del vector que son pares","18. Calcule el promedio de los datos del vector que son impares","19. Calcular la diferencia entre el dato mayor y el dato menor","20. Ordenar los datos del vector","21. Mostrar las veces que se presenta el dato mayor","22. Mostrar el mayor de los datos impares","23. Calcular la suma de dígitos de cada dato del vector","24. Calcular la suma de dígitos de todos los números del vector","25. Hacer el intercambio de C/U de los datos del vector"}));
        jComboBox1.setToolTipText("Barra desplegable");
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        atxtVector.setEditable(false);
        atxtVector.setBackground(new java.awt.Color(204, 255, 204));
        atxtVector.setColumns(20);
        atxtVector.setRows(5);
        atxtVector.setToolTipText("Vector - posición y dato");
        jScrollPane1.setViewportView(atxtVector);

        jTextPane1.setEditable(false);
        jTextPane1.setBackground(new java.awt.Color(204, 204, 255));
        jTextPane1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jTextPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextPane1.setText("Panel de respuesta...");
        jTextPane1.setToolTipText("Respuesta");
        jTextPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(jTextPane1);

        jButton3.setBackground(new java.awt.Color(0, 204, 102));
        jButton3.setText("Limpiar panel de respuesta");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        lblTitulo.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(0, 0, 204));
        lblTitulo.setText("Vector entero generado por la función \"Random\"");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(192, 192, 192))
                    .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(52, 52, 52)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(26, 26, 26))
        );

        jTabbedPane1.addTab("ProyVector", jPanel1);

        btnIntercambioC.setText("Intercambiar Columnas");
        btnIntercambioC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIntercambioCActionPerformed(evt);
            }
        });

        txtPaneMatriz.setEditable(false);
        txtPaneMatriz.setBackground(new java.awt.Color(204, 255, 204));
        txtPaneMatriz.setToolTipText("Matriz Posicion-Dato");
        jScrollPane4.setViewportView(txtPaneMatriz);

        btnLlenarMatriz.setBackground(new java.awt.Color(102, 102, 0));
        btnLlenarMatriz.setForeground(new java.awt.Color(255, 255, 255));
        btnLlenarMatriz.setText("Llenar Matriz");
        btnLlenarMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLlenarMatrizActionPerformed(evt);
            }
        });

        btnOrdenAscendente.setText("Ordenar Ascendentemente");
        btnOrdenAscendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrdenAscendenteActionPerformed(evt);
            }
        });

        jList1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "1. Una función que encuentre  la suma de los datos de la matriz.", "2. Un procedimiento que muestre el valor mayor de la matriz y la posición donde se encuentra.", "3. Una función que encuentre la suma de los datos ubicados en las columnas pares de la matriz", "4. Una función que encuentre la suma de los datos ubicados en las columnas impares de la matriz.", "5. Un procedimiento que muestre el promedio de los datos de la matriz (fijando columnas).", "6. Un procedimiento que muestre cada uno de  los datos mayores al promedio.", "7. Un procedimiento que muestre el promedio de los datos ubicados en las filas pares de la matriz.", "8. Un procedimiento que muestre el promedio de los datos ubicados en las columnas impares de la matriz.", "9. Mostrar la suma de los  elementos ubicados en la diagonal principal (Solo matrices NxN).", "10. Mostrar la suma de los elementos ubicados en la diagonal secundaria (Solo matrices NxN).", "11. Intercambiar el contenido de la matriz por columnas invertidas", "12. Resolver el problema 11, haciendo intercambio de filas.", "13. Diseñar una función que averigüe si una matriz es simétrica.", "14. Una función que retorne el número de valores impares.", "15. Una función que retorne el número de valores pares.", "16.Una función que retorne el promedio de los datos ubicados en las filas impares." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jList1);

        lblTitulo1.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        lblTitulo1.setForeground(new java.awt.Color(0, 0, 204));
        lblTitulo1.setText("Matriz entera generado por la función \"Random\"");

        btnGenerar.setBackground(new java.awt.Color(102, 102, 0));
        btnGenerar.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        btnIntercambioF.setText("Intercambiar Filas");
        btnIntercambioF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIntercambioFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnOrdenAscendente, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(btnGenerar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnIntercambioC, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                            .addComponent(btnIntercambioF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblTitulo1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLlenarMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(159, 159, 159))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(lblTitulo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLlenarMatriz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIntercambioC)
                    .addComponent(btnGenerar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIntercambioF)
                    .addComponent(btnOrdenAscendente))
                .addContainerGap())
        );

        jTabbedPane1.addTab("ProyMatriz", jPanel3);

        txtPaneDescripcion.setEditable(false);
        txtPaneDescripcion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 255), 1, true));
        txtPaneDescripcion.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        txtPaneDescripcion.setText("Selecione un ítem de la barra desplegable para ejecutar un método en el vector...");
        txtPaneDescripcion.setToolTipText("Descripción...");
        txtPaneDescripcion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(txtPaneDescripcion);

        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Default", "Rojo", "Amarillo", "Verde", "Azul", "Rosado", "Naranjado", " ", "fDefault", "fNegro", "fMagenta", "fBlanco", "fAzul" }));
        jComboBox2.setToolTipText("Color de ventana");
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        int seleccionFicha = jTabbedPane1.getSelectedIndex();//captura la seleccion en la ficha (jTabbedPane)
        switch(seleccionFicha){
            case 0:
            txtPaneDescripcion.setText("Selecione un ítem de la barra desplegable para ejecutar un método en el vector...");
            break;
            case 1:
            txtPaneDescripcion.setText("Seleccioné Arreglo o estructura estadica a generar");
            break;
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void btnIntercambioFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIntercambioFActionPerformed
        objMatriz.cambioFilas();
        mostrarMatriz();
    }//GEN-LAST:event_btnIntercambioFActionPerformed

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        int item=jList1.getSelectedIndex();
        switch (item){
            case 0:
            JOptionPane.showMessageDialog(null, "La suma de los datos de la matriz es: "+objMatriz.sumaDM(),null,JOptionPane.INFORMATION_MESSAGE);
            break;
            case 1:
            objMatriz.datoMayor();
            break;
            case 2:
            JOptionPane.showMessageDialog(null, "La suma de los datos de la matriz que se encuentran en las columnas pares es: "+objMatriz.sumaCP(),null,JOptionPane.INFORMATION_MESSAGE);
            break;
            case 3:
            JOptionPane.showMessageDialog(null, "La suma de los datos de la matriz que se encuentran en las columnas impares es: "+objMatriz.sumaCI(),null,JOptionPane.INFORMATION_MESSAGE);
            break;
            case 4:
            objMatriz.promMfijandoC();
            break;
            case 5:
            objMatriz.datosMayoresAlProm();
            break;
            case 6:
            objMatriz.promFilasPares();
            break;
            case 7:
            objMatriz.promColumnasImpares();
            break;
            case 8:
            objMatriz.sumaDatosDgnalPpal();
            break;
            case 9:
            objMatriz.sumaDatosDgnalScndra();
            break;
            case 10:
            objMatriz.cambioColumnas();
            mostrarMatriz();
            break;
            case 11:
            objMatriz.cambioFilas();
            mostrarMatriz();
            break;
            case 12:
            if (objMatriz.matrizSimetrica()==true){
                JOptionPane.showMessageDialog(null, "La matriz es simetrica",null,JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "La matriz NO es simetrica",null,JOptionPane.INFORMATION_MESSAGE);
            }
            break;
            case 13:
            JOptionPane.showMessageDialog(null, "La cantidad de números IMPARES en la matriz es: "+objMatriz.cantidadImpares(),null,JOptionPane.INFORMATION_MESSAGE);
            break;
            case 14:
            JOptionPane.showMessageDialog(null, "La cantidad de números PARES en la matriz es: "+objMatriz.cantidadPares(),null,JOptionPane.INFORMATION_MESSAGE);
            break;
            case 15:
            JOptionPane.showMessageDialog(null,"El promedio de los datos ubicados en las FILAS IMPARES es: "+objMatriz.promFilasImpares(),null,JOptionPane.INFORMATION_MESSAGE);
            break;
        }
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void btnOrdenAscendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrdenAscendenteActionPerformed
        /*objMatriz.OrdenaAscendente();
        mostrarMatriz();*/
    }//GEN-LAST:event_btnOrdenAscendenteActionPerformed

    private void btnLlenarMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLlenarMatrizActionPerformed
        objMatriz.llenar();
        mostrarMatriz();
    }//GEN-LAST:event_btnLlenarMatrizActionPerformed

    private void btnIntercambioCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIntercambioCActionPerformed
        objMatriz.cambioColumnas();
        mostrarMatriz();
    }//GEN-LAST:event_btnIntercambioCActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextPane1.setText("Panel de respuesta...");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (" ".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Selecione un ítem de la barra desplegable para ejecutar un método en el vector...");
        }
        if ("Generar vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Genera un vector de 10 posiciones aleatorio con la función random entre 0 y 50 ");
        }
        if ("1. Sumar datos del vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Suma cada uno de los datos del vector pasando por cada una de las posiciones guardandolos en una variable acumulativa");
        }
        if ("2. Buscar el dato mayor y posicion del vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Busca el dato mayor mayor en el vector y muestra la posición y el dato correspodiente");
        }
        if ("3. Suma de los datos del vector ubicados en las posiciones pares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Genera la suma de los datos que se encuentran en las posiciones PARES del vector así 0,2,4,6...");
        }
        if ("4. Suma de los datos del vector ubicados en las posiciones impares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Genera la suma de los datos que se encuentran en las posiciones IMPARES del vector así 1,3,5,7...");
        }
        if ("5. Promedio de los datos".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Halla el promedio del vector sumando cada uno de los datos de cada posición y dividiendolos por la cantidad de datos");
        }
        if ("6. Mostrar cada uno de los datos mayores al promedio".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Halla el promedio del vector y despues lo recorre en busca de los datos que son mayores al promedio y por último los muestra");
        }
        if ("7. Mostrar el promedio de los datos ubicados en las posiciones pares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Halla el promedio de los datos ubicados en las posiciones PARES de manera que se sumen solo los datos y finalmente se divida por la mitad de las posiciones totales");
        }
        if ("8. Mostrar el promedio de los datos ubicados en las posiciones impares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Halla el promedio de los datos ubicados en las posiciones IMPARES de manera que se sumen solo los datos y finalmente se divida por la mitad de las posiciones totales");
        }
        if ("9. Cuantos datos del vector son mayores que el promedio".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Evalua la cantidad de datos que están por encima del promedio y muestra la cantidad de ellos");
        }
        if ("10. Muestre los datos del vector que son múltiplos de tres".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Recorre el vector en busca de los números que son multiplos de 3 utilizando la función mod 3 = 0");
        }
        if ("11. El producto de los datos del vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Pasa por cada uno de las posiciones del vector multiplicando y acumulando cada uno de los datos con una variable inicializada en 1");
        }
        if ("12. La suma de los datos del vector excepto, 1, n/2 y n".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Imprime la suma de los datos del vector omitiendo los datos que se encuentran en las posiciones de la de la mitad, la primera y la última");
        }
        if ("13. Mostrar el elemento menor en el vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Ubica el dato menor que hay en el vector y lo muestra en pantalla");
        }
        if ("14. Mostrar el número de datos del vector que son impares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Recorre el vector en busca de los números IMPARES y simultaneamente los suma para finalmente mostrar la cantidad de ellos");
        }
        if ("15. Mostrar el número de datos del vector que son pares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Recorre el vector en busca de los números PARES y simultaneamente los suma para finalmente mostrar la cantidad de ellos");
        }
        if ("16. Intercambiar los datos del vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Intercambia los datos del vector de manera que la primera posición pasa a ser la última y la última pasa a ser la primera y así sucesivamente");
        }
        if ("17. Calcule el promedio de los datos del vector que son pares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Recorre el vector en busca de los números que son PARES,de forma que hace una suma con estos y por ultimo la suma la divide por la cantidad de números impares que hay en el vector");
        }
        if ("18. Calcule el promedio de los datos del vector que son impares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Recorre el vector en busca de los números que son IMPARES,de forma que hace una suma con estos y por ultimo la suma la divide por la cantidad de números impares que hay en el vector");
        }
        if ("19. Calcular la diferencia entre el dato mayor y el dato menor".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Halla inicialmente el datos mayor y menor del vector y hace la resta de los mismos");
        }
        if ("20. Ordenar los datos del vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Ordena los datos de manera descendente por el método de la burbuja");
        }
        if ("21. Mostrar las veces que se presenta el dato mayor".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Busca el dato mayor entre las posiciones del vector y cuenta las veces que se encuentra en el vector");
        }
        if ("22. Mostrar el mayor de los datos impares".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Recorre el vector en busca de los números que son impares y despues halla el dato mayor y finalmente lo(s) muestra");
        }
        if ("23. Calcular la suma de dígitos de cada dato del vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Suma los digitos del número que hay en cada una de las posiciones del vector y la muestra");
        }
        if ("24. Calcular la suma de dígitos de todos los números del vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Recorre el vector sumando los digitos de cada una de las posiciones del vector hasta finalizar y los muestra");
        }
        if ("25. Hacer el intercambio de C/U de los datos del vector".equals(jComboBox1.getSelectedItem().toString())){
            txtPaneDescripcion.setText("Hace el intercambio de cada uno de los números del vector de manera que si es el 32 quedará 23");
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int opcion=jComboBox1.getSelectedIndex();//llevar a la variable opcion el valor que se selecciona en el jComboBox
        if (opcion==0){

        }
        if (opcion==1){
            objVector.llenar();
            mostrarVector();
        }
        if (opcion==2){
            jTextPane1.setText("la suma de los datos del vector es: "+objVector.sumarV());
        }
        if (opcion==3){
            objVector.punto2();
        }
        if (opcion==4){
            jTextPane1.setText("la suma de los datos del vector ubicados en las posiciones pares es: "+objVector.punto3());
        }
        if (opcion==5){
            jTextPane1.setText("la suma de los datos del vector ubicados en las posiciones impares es: "+objVector.punto4());
        }
        if (opcion==6){
            objVector.punto5();
        }
        if (opcion==7){
            objVector.punto6();
        }
        if (opcion==8){
            objVector.punto7();
        }
        if (opcion==9){
            objVector.punto8();
        }
        if (opcion==10){
            jTextPane1.setText("Los datos mayores al promedio son: "+objVector.punto4());
        }
        if (opcion==11){
            objVector.punto10();
        }
        if (opcion==12){
            jTextPane1.setText("El producto de los datos del vector es: "+objVector.punto11());
        }
        if (opcion==13){
            jTextPane1.setText("La suma de los datos del vector excepto el primero, ultimo y el dato del centro: "+objVector.punto12());
        }
        if (opcion==14){
            jTextPane1.setText("El elemento menor del vector es: "+objVector.punto13());
        }
        if (opcion==15){
            jTextPane1.setText("El número de datos del vector que son impares, es: "+objVector.punto14());
        }
        if (opcion==16){
            jTextPane1.setText("El número de datos del vector que son pares, es: "+objVector.punto15());
        }
        if (opcion==17){
            objVector.punto16();
        }
        if (opcion==18){
            objVector.punto17();
        }
        if (opcion==19){
            objVector.punto18();
        }
        if (opcion==20){
            jTextPane1.setText("La diferencia entre el dato mayor y el dato menor, es: "+objVector.punto19());
        }
        if (opcion==21){
            objVector.ordenarV();
            jTextPane1.setText(null);
            mostrarVector();
        }
        if (opcion==22){
            jTextPane1.setText("las veces que se presenta el dato mayor es: "+objVector.punto21());
        }
        if (opcion==23){
            objVector.punto22();
            mostrarVector();
        }
        if (opcion==24){
            objVector.punto23();
        }
        if (opcion==25){
            objVector.punto24();
        }
        if (opcion==26){
            objVector.intercambioDatosVector();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        if (jToggleButton1.isSelected()){
            txtPaneDescripcion.setVisible(true);
            jToggleButton1.setText("ON");
            jComboBox2.setVisible(true);
        }
        else{
            txtPaneDescripcion.setVisible(false);
            jToggleButton1.setText("OFF");
            jComboBox2.setVisible(false);
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        int item=jComboBox2.getSelectedIndex();
        switch (item){
            case 0:
                jPanel1.setBackground(new Color (240,240,240));
                jPanel3.setBackground(new Color (240,240,240));
                break;
            case 1:
                jPanel1.setBackground(Color.RED);
                jPanel3.setBackground(Color.RED);
                break;
            case 2:
                jPanel1.setBackground(Color.YELLOW);
                jPanel3.setBackground(Color.YELLOW);
                break;
            case 3:
                jPanel1.setBackground(Color.GREEN);
                jPanel3.setBackground(Color.GREEN);
                break;
            case 4:
                jPanel1.setBackground(Color.BLUE);
                jPanel3.setBackground(Color.BLUE);
                break;
            case 5:
                jPanel1.setBackground(Color.PINK);
                jPanel3.setBackground(Color.PINK);
                break;
            case 6:
                jPanel1.setBackground(Color.ORANGE);
                jPanel3.setBackground(Color.ORANGE);
                break;
            case 8:
                getContentPane().setBackground(new Color(240,240,240));
                break;
            case 9:
                getContentPane().setBackground(Color.BLACK);
                break;
            case 10:
                getContentPane().setBackground(Color.MAGENTA);
                break;
            case 11:
                getContentPane().setBackground(Color.WHITE);
                break;
            case 12:
                getContentPane().setBackground(Color.BLUE);
                break;
            
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmContenido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmContenido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmContenido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmContenido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmContenido().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea atxtVector;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnIntercambioC;
    private javax.swing.JButton btnIntercambioF;
    private javax.swing.JButton btnLlenarMatriz;
    private javax.swing.JButton btnOrdenAscendente;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JTextPane jTextPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTitulo1;
    private javax.swing.JTextPane txtPaneDescripcion;
    private javax.swing.JTextPane txtPaneMatriz;
    // End of variables declaration//GEN-END:variables
}
